#!/bin/bash

# location of dotfiles repository
repo=https://github.com/kyau/dotfiles.git
# folder the repo will be stored in (~/$repofolder)
repo_folder=dot
# package installer
pkgman="pacaur"
# configs in the root directory
root_files=( "bash_profile" "bashrc" "gitconfig" "screenrc" "vimrc" )
# xorg configs in the root directory
root_files_xorg=( "Xmodmap" "Xresources" "xbindkeysrc" "xinitrc" )
# directories in the root directory
root_dir=( "bash.d" "vim" )
# xorg directories in the root directory
root_dir_xorg=()
# configs inside ~/.config/
config_files=()
# xorg configs inside ~/.config/
config_files_xorg=( "compton.conf" )
# directories inside ~/.config/
config_dir=( "htop" "irssi" "neofetch" "ranger" )
# xorg directories inside ~/.config/
config_dir_xorg=( "ckb" "i3" "mpd" "mpv" "ncmpcpp" "polybar" "vis" )

## CONFIG DONE ~ DO NOT EDIT BELOW THIS LINE!
DEBUG=0
log=install.log
destination=${HOME}/test
pkglog=pkg.log
testpass=1

here_be_dragons() {
	if [ -z $1 ]; then return 0; fi
	if [ -z $2 ]; then local s=; else local s=$2; fi
	if [ -z $3 ]; then local dot=; else local dot=$3; fi
	if [ -e "${destination}${s}/${dot}${1}" ]; then
		if [ "${destination}${s}/${dot}${1}" == "${HOME}/.ssh" ]; then
			echo -e "symlink: ignore: ${destination}${s}/${dot}${1}" >> ${destination}/${log}
		else
			if [ -h "${destination}${s}/${dot}${1}" ]; then
				if [ "$DEBUG" == "1" ]; then
					echo -en "\n	\e[31m\uf057\e[0m ~${s}/${dot}${1} \e[1;30m(current sym-link will be deleted)\e[0m" 
				else
					echo -e "symlink: delete: ${destination}${s}/${dot}${1}" >> ${destination}/${log}
					rm ${destination}${s}/${dot}${1}
				fi
			else
				if [ "$DEBUG" == "1" ]; then
					echo -en "\n	\e[1;34m\ue706\e[0m ~${s}/${dot}${1} \e[1;30m(backup: ~${s}/${1}.ibk)\e[0m"
				else
					echo -e "symlink: backup: ${destination}${s}/${dot}${1}.ibk" >> ${destination}/${log}
					mv ${destination}${s}/${dot}${1} ${destination}${s}/${1}.ibk
				fi
			fi
		fi
	fi
	if [ "$s" == "/.config" ]; then
		local t=/config
	else
		local t=$s
	fi
	if [ -e "${HOME}/${repo_folder}${t}/${1}" ]; then
		if [ "$DEBUG" == "1" ]; then
			echo -en "\n	\e[1;36m\uf064\e[0m ${repo_folder}${t}/${1} \e[1;37m\uf061\e[0m ~${s}/${dot}${1}"
		else
			ln -s ~/${repo_folder}${t}/${1} ${destination}${s}/${dot}${1}
			echo -e "symlink: create: ${repo_folder}${t}/${1} -> ${s}/${dot}${1}" >> ${destination}/${log}
		fi
	else
		echo -en "\n		\e[31mERROR: \e[1;37m~/${repo_folder}${t}/${1} \e[0mnot found\e[0m"
		echo -e "! symlink: ERROR: ~/${repo_folder}${t}/${1} not found" >> ${destination}${log}
		testpass=0
	fi
}

symlink_master() {
	local tmparr=()
	dest=
	local directory=0
	local dot=
	case "$1" in
		root_files)
			tmparr=("${root_files[@]}")
			dot=.
			;;
		root_files_xorg)
			tmparr=("${root_files_xorg[@]}")
			dot=.
			;;
		root_dir)
			tmparr=("${root_dir[@]}")
			dot=.
			directory=1
			;;
		root_dir_xorg)
			tmparr=("${root_dir_xorg[@]}")
			dot=.
			directory=1
			;;
		config_files)
			tmparr=("${config_files[@]}")
			dest=/.config
			;;
		config_dir)
			tmparr=("${config_dir[@]}")
			dest=/.config
			directory=1
			;;
		config_dir_xorg)
			tmparr=("${config_dir_xorg[@]}")
			dest=/.config
			directory=1
			;;
		*)
			return 0
			;;
	esac
	if [ "$directory" == "0" ]; then
		for file in "${tmparr[@]}"; do
			here_be_dragons "$file" "$dest" "$dot"
		done
	elif [ "$directory" == "1" ]; then
		for dir in "${tmparr[@]}"; do
			here_be_dragons "$dir" "$dest" "$dot"
		done
	fi
}

testing=

gitclone() {
	echo -en "\e[1;30m\uf141\e[0m \e[37m${testing}Cloning repository\e[0m "
	if [ -d ${HOME}/${repo_folder} ]; then
		if [ "$DEBUG" == "1" ]; then echo -en "\n  "; fi
		echo -en "\e[1;33m\uf12a\e[0m "
		if [ "$DEBUG" == "1" ]; then
			echo -e "~/${repo_folder} \e[1;30m(directory exists)\e[0m"
		else
			echo -en "\n"
		fi
		echo -e "! download: WARNING: ${repo_folder} already exists" >> ${destination}/${log}
		testpass=0
	else
		git clone --quiet ${repo} ${HOME}/${repo_folder} | sed 's/^/\t/' >> ${destination}/${log}
		if [ $? -eq 0 ]; then
			echo -e "\e[1;32m\uf00c\e[0m"
		else
			echo -e "\e[31m\uf00d\e[0m"
		fi
	fi
	if [ "$DEBUG" == "1" ]; then
		echo -en "	\e[0;37m Test "
		if [ "$testpass" == "1" ]; then
			echo -e "\e[1;32mPass \uf00c\e[0m"
		else
			echo -e "Fail \e[31m\uf00d\e[0m"
		fi
	fi
	cd ${HOME}/${repo_folder}
	testpass=1
}

symlink() {
	echo -en "\e[1;30m\uf141\e[0m \e[37m${testing}Link configs\e[0m "
	echo -e "symlink: creating symbolic links..." >> ${destination}/${log}
	if [ ! -d "${destination}/.config/" ]; then
		if [ "$DEBUG" == "1" ]; then
			echo -en "\n	\e[1;36m\uf067\e[0m ~/.config \e[1;30m(mkdir)\e[0m"
		else
			mkdir ${destination}/.config
		fi
	fi
	symlink_master root_files
	symlink_master root_dir
	symlink_master config_files
	symlink_master config_dir
	if [ "$1" == "1" ]; then
		symlink_master root_files_xorg
		symlink_master root_dir_xorg
		symlink_master config_files_xorg
		symlink_master config_dir_xorg
	fi
	if [ "$DEBUG" == "1" ]; then echo -en "\n \e[0;37m Test "; fi
	if [ "$testpass" == "1" ]; then echo -e "Pass \e[1;32m\uf00c\e[0m"; else echo -e "Fail \e[31m\uf00d\e[0m"; fi
	testpass=1
}

bindir() {
	echo -en "\e[1;30m\uf141\e[0m \e[37m${testing}Link bin\e[0m "
	if [ -e "${destination}/bin" ]; then
		if [ -h "${destination}/bin" ]; then
			if [ "$DEBUG" == "1" ]; then
				echo -en "\n	\e[31m\uf057\e[0m ~/bin \e[1;30m(current sym-link will be deleted)\e[0m"
			else
				echo -e "bin: delete: ${destination}/bin" >> ${destination}/${log}
				rm ${destination}/bin
			fi
		else
			if [ "$DEBUG" == "1" ]; then
				echo -en "\n	\e[1;34m\ue706\e[0m ~/bin \e[1;30m(backup: ~/bin.ibk)\e[0m"
			else
				echo -e "bin: backup: ${destination}/bin" >> ${destination}/${log}
				mv ${destination}/bin ${destination}/bin.ibk
			fi
		fi
	fi

	if [ -d ${HOME}/$repo_folder/bin ]; then
		if [ "$DEBUG" == "1" ]; then 
			echo -en "\n \e[0;37m Test "
			echo -e "Pass \e[1;32m\uf00c\e[0m"
		else
			ln -s ~/${repo_folder}/bin $destination/bin;
			echo -e "\e[1;32m\uf00c\e[0m"
		fi
	else
		echo -en "\n		\e[31mERROR: \e[1;37m~/${repo_folder}/bin\e[0m not found"
		echo -e "! symlink: ERROR: ~/${repo_folder}/bin not found" >> ${destination}${log}
		if [ "$DEBUG" == "1" ]; then 
			echo -en "\n \e[0;37m Test "
			echo -e "Fail \e[31m\uf00d\e[0m"
		fi
	fi
}

install() {
	testpass=1
	if [ -z $1 ]; then return 0; fi
	echo -en "\e[1;30m\uf141\e[0m \e[37m${testing}Installing packages\e[0m "
	if [ -f "${HOME}/${repo_folder}/.pkg-${1}" ]; then
		IFS=$'\n' read -d '' -r -a pkglist < $HOME/$repo_folder/.pkg-$1
		if [ ${#pkglist[@]} -eq 0 ]; then
			echo -e " \e[1;33m\uf12a\e[0m No packages detected"
		else
			if [ "$DEBUG" == "1" ]; then
				echo -en "\n \e[0m Verifying packages:\e[0m "
			else
				echo -en "\n \e[0m Installing packages:\e[0m "
			fi
			local first=1
			for pkg in "${pkglist[@]}"; do
				pkgc=
				if [ "${pkg:0:1}" == "#" ]; then continue; fi
				#if [ "$first" == "1" ]; then
				#	echo -en "\e[1;30m${pkg}\e[0m"
				#else
				#	echo -en ", \e[1;30m${pkg}\e[0m"
				#fi
				if [ "$DEBUG" == "1" ]; then
					local pacman=0
					local aur=0
					pacman -Ssq $pkg | grep "^$pkg$" > /dev/null
					if [ $? -eq 0 ]; then
						pacman=1
					else
						pacman=0
					fi
					if [ "$pacman" == "0" ]; then
						git ls-remote -q --exit-code https://aur.archlinux.org/$pkg.git > /dev/null
						if [ $? -eq 0 ]; then
							aur=1
						else
							aur=0
						fi
					fi
					if [ "$pacman" == "1" ] || [ "$aur" == "1" ]; then
						pkgc="\e[0;36m"
					else
						pkgc="\e[0;31m"
						testpass=0
					fi
				else
					yes | $pkgman -Sq $pkg > /dev/null
					if [ $? -eq 0 ]; then
						pkgc="\e[0;36m"
						echo -e "pkg: install: ${pkg} installed" >> ${destination}/${log}
					else
						pkgc="\e[0;31m"
						testpass=0
						echo -e "pkg: ERROR: ${pkg} failed install" >> ${destination}/${log}
					fi
				fi
				if [ "$first" == "1" ]; then
					echo -en "${pkgc}${pkg}\e[0m"
					first=0
				else
					echo -en "\e[0m, "
					if [ "$DEBUG" == "1" ] && [ "$aur" == "1" ]; then echo -en "${pkgc}aur:"; fi
					echo -en "${pkgc}${pkg}\e[0m"
				fi
			done
		fi
	else
		echo -en "\n		\e[31mERROR: \e[1;37m~/${repo_folder}/.pkg-${1}\e[0m not found"
		echo -e "pkg: ERROR: ~/${repo_folder}/.pkg-${1} not found" >> ${destination}/${log}
	fi
	if [ "$DEBUG" == "1" ]; then 
		echo -en "\n \e[0;37m Test "
		if [ "$testpass" == "1" ]; then
			echo -e "Pass \e[1;32m\uf00c\e[0m"
		else
			echo -e "Fail \e[31m\uf00d\e[0m"
		fi
	fi
}

# start
xorg=0
# check for git
git --version >/dev/null 2>&1
if [ ! $? -eq 0 ]; then
	echo -e "\e[1;33m\uf12a\e[1;37m dotme\e[0m requires \e[1;36mgit\e[0m."
	exit 1
fi
# display usage if no arguments
if [[ -z $1 ]]; then
	echo -e "Usage: ${0} <environment> [--test]\n  <environment>\t\tenvironment to install (chloe, neutron, x220)\n  --test\t\trun a test instead of actually installing"
	exit 1
fi
# test mode
if [ "$2" == "--test" ]; then
	DEBUG=1
	testing="\e[1;35mRunning Test:\e[0m "
	echo -e "\e[1;35m\ue00a Test Mode!\e[0m"
fi
# install templates
if [ "$1" == "chloe" ]; then
	xorg=1
	echo -e "\e[1;36m\uf011\e[0m \e[37mEnvironment:\e[1;33m ${1}\e[0m"
	gitclone
	bindir
	symlink "${xorg}"
	install chloe
elif [ "$1" == "neutron" ]; then
	echo -e "\e[1;36m\uf011\e[0m \e[37mEnvironment:\e[1;33m ${1}\e[0m"
	gitclone
	bindir
	symlink "${xorg}"
	install neutron
elif [ "$1" == "x220" ]; then
	xorg=1
	echo -e "\e[1;36m\uf011\e[0m \e[37mEnvironment:\e[1;33m ${1}\e[0m"
	gitclone
	bindir
	symlink "${xorg}"
	install x220
fi

# vim: ts=2 sw=2 noet :
